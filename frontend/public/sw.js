const CACHE_NAME = 'zenith-pdf-cache-v1';
const URLS_TO_CACHE = [
  '/',
  '/index.html',
  // Add other assets like CSS, JS, icons that are generated by the build process
];

// Using a library like workbox would be more robust, but for this task, a simple SW is fine.

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Opened cache');
        return cache.addAll(URLS_TO_CACHE);
      })
  );
});

self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        if (response) {
          return response; // Serve from cache
        }
        return fetch(event.request); // Fetch from network
      })
  );
});

self.addEventListener('sync', event => {
  if (event.tag === 'sync-annotations') {
    console.log('Sync event for annotations triggered!');
    event.waitUntil(syncAnnotations());
  }
});

async function syncAnnotations() {
  // This is a simplified version. A real implementation would need access to IndexedDB.
  // Since the SW runs in a different context, direct import is not possible without bundling.
  // We will post a message to the client to handle the sync.
  console.log('Service Worker is asking client to sync...');
  const clients = await self.clients.matchAll();
  clients.forEach(client => {
    client.postMessage({ type: 'SYNC_REQUEST' });
  });
}
